package models;

import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.Transparency;
import java.awt.image.BufferedImage;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;

import javax.imageio.ImageIO;
import javax.persistence.*;

import play.data.Upload;
import play.db.jpa.Blob;
import play.db.jpa.Model;

@Entity(name="user_file")
public class Avatar extends Model {
	
	@ManyToOne(fetch=FetchType.LAZY)
	@JoinColumn(name="user_id")
	public User user;
	
	public String name;

	@Column(name="content_type")
	public String contentType;

	@Column(name="data")
	@Lob	
	public byte[] imageBytes;
	
	public Long size;
	
	
	public void setCropAndScaleAvatarUpload(Upload avatarUpload, int x1, int x2, int y1, int y2, int finalWidthAndHeight) throws IOException {
		
		int croppedWidth = x2-x1;
		int croppedHeight = y2-y1;
		
		this.contentType = avatarUpload.getContentType();
		this.name = "Avatar";
		this.size = avatarUpload.getSize();
		

		BufferedImage img = ImageIO.read(avatarUpload.asStream());
		BufferedImage cropped = img.getSubimage(x1, y1, croppedWidth, croppedHeight);
		BufferedImage resized = cropped;
		if (croppedWidth != finalWidthAndHeight) {
			resized = Avatar.getScaledInstance(cropped, finalWidthAndHeight, finalWidthAndHeight, RenderingHints.VALUE_INTERPOLATION_BICUBIC, true);
		} 
		
		ByteArrayOutputStream baos = new ByteArrayOutputStream();

		ImageIO.write( resized, "jpg", baos );
		baos.flush();
		this.imageBytes = baos.toByteArray();
		baos.close();
		
	}

	
	
    /**
     * Copied from http://today.java.net/pub/a/today/2007/04/03/perils-of-image-getscaledinstance.html
     * 
     * Convenience method that returns a scaled instance of the
     * provided {@code BufferedImage}.
     *
     * @param img the original image to be scaled
     * @param targetWidth the desired width of the scaled instance,
     *    in pixels
     * @param targetHeight the desired height of the scaled instance,
     *    in pixels
     * @param hint one of the rendering hints that corresponds to
     *    {@code RenderingHints.KEY_INTERPOLATION} (e.g.
     *    {@code RenderingHints.VALUE_INTERPOLATION_NEAREST_NEIGHBOR},
     *    {@code RenderingHints.VALUE_INTERPOLATION_BILINEAR},
     *    {@code RenderingHints.VALUE_INTERPOLATION_BICUBIC})
     * @param higherQuality if true, this method will use a multi-step
     *    scaling technique that provides higher quality than the usual
     *    one-step technique (only useful in downscaling cases, where
     *    {@code targetWidth} or {@code targetHeight} is
     *    smaller than the original dimensions, and generally only when
     *    the {@code BILINEAR} hint is specified)
     * @return a scaled version of the original {@code BufferedImage}
     */
    public static BufferedImage getScaledInstance(BufferedImage img,
                                           int targetWidth,
                                           int targetHeight,
                                           Object hint,
                                           boolean higherQuality)
    {
        int type = (img.getTransparency() == Transparency.OPAQUE) ?
            BufferedImage.TYPE_INT_RGB : BufferedImage.TYPE_INT_ARGB;
        BufferedImage ret = (BufferedImage)img;
        int w, h;
        if (higherQuality && img.getWidth() > targetWidth && img.getHeight() > targetHeight) {
            // Use multi-step technique: start with original size, then
            // scale down in multiple passes with drawImage()
            // until the target size is reached
            w = img.getWidth();
            h = img.getHeight();
        } else {
            // Use one-step technique: scale directly from original
            // size to target size with a single drawImage() call
            w = targetWidth;
            h = targetHeight;
        }
        
        do {
            if (higherQuality && w > targetWidth) {
                w /= 2;
                if (w < targetWidth) {
                    w = targetWidth;
                }
            }

            if (higherQuality && h > targetHeight) {
                h /= 2;
                if (h < targetHeight) {
                    h = targetHeight;
                }
            }

            BufferedImage tmp = new BufferedImage(w, h, type);
            Graphics2D g2 = tmp.createGraphics();
            g2.setRenderingHint(RenderingHints.KEY_INTERPOLATION, hint);
            g2.drawImage(ret, 0, 0, w, h, null);
            g2.dispose();

            ret = tmp;
        } while (w != targetWidth || h != targetHeight);

        return ret;
    }
	
	
}
